@url = http://localhost:3000

### Query 1: Obtener los datos de los clientes junto con sus telefonos
GET {{url}}/clientes/query/1
Content-Type: application/json
Accept: application/json

### Query 2: Obtener el/los teléfono/s y el número de cliente
### del cliente con nombre “Jacob” y apellido “Cooper”
GET {{url}}/clientes/query/2
Content-Type: application/json
Accept: application/json

### Query 3: Mostrar cada teléfono junto con los datos del cliente.
GET {{url}}/clientes/query/3
Content-Type: application/json
Accept: application/json

### Query 4: Obtener todos los clientes que tengan registrada al menos una factura.
GET {{url}}/clientes/query/4
Content-Type: application/json
Accept: application/json

### Query 5: Identificar todos los clientes que no tengan registrada ninguna factura.
GET {{url}}/clientes/query/5
Content-Type: application/json
Accept: application/json

### Query 6: Devolver todos los clientes, con la cantidad de facturas que tienen registradas
### (si no tienen considerar cantidad en 0)
GET {{url}}/clientes/query/6
Content-Type: application/json
Accept: application/json

### Query 7: Listar los datos de todas las facturas que hayan sido compradas
### por el cliente de nombre "Kai" y apellido "Bullock".
GET {{url}}/facturas/query/7
Content-Type: application/json
Accept: application/json

### Query 8: Seleccionar los productos que han sido facturados al menos 1 vez.
GET {{url}}/productos/query/8
Content-Type: application/json
Accept: application/json

### Query 9: Listar los datos de todas las facturas que contengan productos de las marcas “Ipsum”
GET {{url}}/facturas/query/9
Content-Type: application/json
Accept: application/json

### Query 10: Mostrar nombre y apellido de cada cliente junto con lo que gastó en total, con IVA incluido.
GET {{url}}/clientes/query/10
Content-Type: application/json
Accept: application/json

### Query 11: Se necesita una vista que devuelva los datos de las facturas ordenadas por fecha.
### order=asc or order=desc
GET {{url}}/facturas?order=desc
Content-Type: application/json
Accept: application/json

### Query 12: Se necesita una vista que devuelva todos los productos que aún no han sido facturados.
GET {{url}}/productos/query/12
Content-Type: application/json
Accept: application/json

### Requierimiento 13
### Cruds Clientes: Implementar la funcionalidad que permita crear nuevos clientes, eliminar
### y modificar los ya existentes.

### Create a new client
POST {{url}}/clientes/
Content-Type: application/json
Accept: application/json

{
  "nombre": "Buzz",
  "apellido": "Lightyear",
  "direccion": "123 Main St",
  "activo": true,
  "telefonos": {
    "codigo_area": "011",
    "nro_telefono": "12345678",
    "tipo": "cel"
  }
}

### Update a client by nro_cliente
PUT {{url}}/clientes/1
Content-Type: application/json
Accept: application/json

{
  "nombre": "Woody",
  "apellido": "Cowboy",
  "direccion": "123 Main St",
  "activo": true,
  "telefonos": [
    {
      "codigo_area": "011",
      "nro_telefono": "12345678",
      "tipo": "cel"
    },
    {
      "codigo_area": "011",
      "nro_telefono": "42424659",
      "tipo": "tel"
    }
  ]
}

### Delete a client by nro_cliente
DELETE {{url}}/clientes/10
Content-Type: application/json
Accept: application/json

### Get all clients
GET {{url}}/clientes/
Content-Type: application/json
Accept: application/json


### Requierimiento 14
### Cruds Productos: Implementar la funcionalidad que permita crear nuevos productos y modificar los ya
### existentes. Tener en cuenta que el precio de un producto es sin IVA.

### Post product
POST {{url}}/productos/
Content-Type: application/json
Accept: application/json

{
  "nombre": "Salsa Pizza",
  "marca": "Ipsum",
  "descripcion": "Lista para usar",
  "precio": 300.49,
  "stock": 100
}

### Get all products
GET {{url}}/productos/
Content-Type: application/json
Accept: application/json

### Get product by codigo_producto
GET {{url}}/productos/1
Content-Type: application/json
Accept: application/json

### Update a product by codigo_producto
PUT {{url}}/productos/1
Content-Type: application/json
Accept: application/json

{
  "nombre": "arroz premium",
  "marca": "marolio",
  "descripcion": "arroz largo fino",
  "precio": 209.99,
  "stock": 50
}

### Delete a product by codigo_producto
DELETE {{url}}/productos/2
Content-Type: application/json
Accept: application/json

### Get stock for a product
GET {{url}}/productos/2/stock
Content-Type: application/json
Accept: application/json

### Update stock
PUT {{url}}/productos/2/stock
Content-Type: application/json
Accept: application/json

{
  "change": 50
}

### Set stock level
POST {{url}}/productos/4/stock
Content-Type: application/json
Accept: application/json

{
  "stock": 100
}